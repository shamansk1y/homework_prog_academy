# 1) Создайте дескриптор, который будет делать поля класса управляемые им доступными только для чтения.

class Box:
    def __init__(self, x, y, z):
        self.__x = x
        self.__y = y
        self.__z = z
        
    @property
    def x(self):
        return self.__x

    @property
    def y(self):
        return self.__y

    @property
    def z(self):
        return self.__z

    
box_1 = Box(1, 2, 3)
print(box_1.x)
box_1.z = 4





# 2) Реализуйте функционал, который будет запрещать установку полей класса любыми значениями, кроме целых чисел.
# Т.е., если тому или иному полю попытаться присвоить, например, строку, то должно быть возбужденно исключение.

class Box:
    def __init__(self, e, d, c):
        self.__e = e
        self.__d = d
        self.__c = c
                
    e = property()
    d = property()
    c = property()

    @e.setter
    def e(self, value):
        if not isinstance(value, int):
            raise TypeError
        else:
            self.__e = value       

    @d.setter
    def d(self, value):
        if not isinstance(value, int):
            raise TypeError
        else:
            self.__d = value
            
    @c.setter
    def c(self,value):
        if not isinstance(value, int):
            raise TypeError
        else:
            self.__c = value

    def __str__(self):
        return f"{self.__e} * {self.__d} * {self.__c}"
    
box_1 = Box(1, 2, 3)
print(box_1)
box_1.c = 4
print(box_1)
box_1.c = "a"
print(box_1)




# 3) Реализуйте свойство класса, которое обладает следующим функционалом: при установки значения этого свойства в файл
# с заранее определенным названием должно сохранятся время (когда устанавливали значение свойства) и установленное значение.
import datetime

class MyClass:
    
    def __init__(self, name, surname):
        self._name = name
        self._surname = surname
        
    def __setattr__(self, attr_name, attr_value):
        if attr_name in ("_name", "_surname"):
            self._text_file = "text_file.txt"
            time_now = datetime.datetime.now()
            with open(self._text_file, "a") as file:
                file.write(f"{time_now}: {attr_value}\n")
        self.__dict__[attr_name] = attr_value
        
m = MyClass("Name", "Surname")
print(m)
