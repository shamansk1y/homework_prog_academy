# 1. Створіть клас «Прямокутник», у якого є два поля (ширина і висота). Реалізуйте метод порівняння прямокутників за площею.
# Також реалізуйте методи складання прямокутників (площа сумарного прямокутника повинна дорівнювати сумі площ прямокутників, які ви складаєте).
# Реалізуйте методи множення прямокутника на число n (це має збільшити площу базового прямокутника в n разів).

class Rectangle:

    def __init__(self, a: int, b: int):
        """
        Create rectangle
        :param a: width
        :param b: height
        """
        self.a = a
        self.b = b

    def area_rectangle(self) -> int:
        return self.a * self.b

    def __gt__(self, other):
        return self.area_rectangle() > other.area_rectangle()

    def __lt__(self, other):
        return self.area_rectangle() < other.area_rectangle()

    def __ge__(self, other):
        return self.area_rectangle() >= other.area_rectangle()

    def __le__(self, other):
        return self.area_rectangle() <= other.area_rectangle()

    def __add__(self, other):
        if isinstance(other, Rectangle):
            return self.area_rectangle() + other.area_rectangle()
        if isinstance(other, int):
            return self.area_rectangle() + other
        return NotImplemented

    def __radd__(self, other):
        if isinstance(other, (int, float)):
            return self.area_rectangle() + other
        return NotImplemented

    def __mul__(self, other):
        if isinstance(other, Rectangle):
            return self.area_rectangle() * other.area_rectangle()
        if isinstance(other, int):
            return self.area_rectangle() * other
        return NotImplemented

    def __rmul__(self, other):
        if isinstance(other, (int, float)):
            return self.area_rectangle() * other
        return NotImplemented

    def __str__(self):
        return f'{self.a} x {self.b}'

x = Rectangle(1, 2)
y = Rectangle(3, 4)

print(x)
print(y)
print(x > y)
print(x < y)
print(x >= y)
print(x <= y)
print(x + y)
print(x * 5)
print(5 * y)



# 2. Створіть клас «Правильна дроба» та реалізуйте методи порівняння, додавання, віднімання та множення для екземплярів цього класу.

import math

class Rational:

    def __init__(self, a: int, b = 1):
        """
        Class for creating a fraction
        :param a: Numerator
        :param b: Denominator
        """
        if not isinstance(a, int):
            raise TypeError('Numerator must be int')
        if not isinstance(b, int):
            raise TypeError('Denominator must be int')
        if not b:
            raise ZeroDivisionError()

        self.__a = a
        self.__b = b

    def __eq__(self, other):
        k = math.gcd(self.__a, self.__b)
        self.__a //= k
        self.__b //= k

        k = math.gcd(other.__a, other.__b)
        other.__a //= k
        other.__b //= k
        return (self.__a, self.__b) == (other.__a, other.__b)

    def __ne__(self, other):
        return not self.__eq__(other)

    def __lt__(self, other):
        return self.__a / self.__b < other.__a / other.__b

    def __gt__(self, other):
        return self.__a / self.__b > other.__a / other.__b

    def __sub__(self, other):
        b = self.__b * other.__b
        a = b // self.__b * self.__a -\
            b // other.__b * other.__a
        return Rational(a, b)

    def __rsub__(self, other):
        b = self.__b * other.__b
        a = b // self.__b * self.__a -\
            b // other.__b * other.__a
        return Rational(a, b)

    def __isub__(self, other):
        sign = 1 if self.__a * self.__b > 0 else -1
        b = abs(self.__b) * abs(other.__b)
        a = b // abs(self.__b) * abs(self.__a) -\
            b // abs(other.__b) * abs(other.__a)
        self.__a = sign * a
        self.__b = b
        return self

    def __ge__(self, other):
        return self.__a / self.__b >= other.__a / other.__b

    def __le__(self, other):
        return self.__a / self.__b <= other.__a / other.__b

    def __mul__(self, other):
        b = self.__b * other.__b
        a = self.__a * other.__a
        return Rational(a, b)

    def __add__(self, other):
        b = self.__b * other.__b
        a = self.__a * other.__b + other.__a * self.__b
        return Rational(a, b)

    def __str__(self):
        sign = '' if self.__a * self.__b >= 0 else '-'
        a, b = abs(self.__a), abs(self.__b)
        k = math.gcd(a, b)
        a //= k
        b //= k

        if a == b:
            return f'{sign}1'
        if b == 1:
            return f'{sign}{a}'
        if a > b:
            return f'{sign}{a // b} {a % b} / {b}'
        return f'{sign}{a} / {b}'


x1 = Rational(1, 4)
x2 = Rational(-1)
print(x1)
print(x2)
print(x2 - x1)
print(x1 - x2)
print(x2 + x1)
print(x1 + x2)
print(x1 > x2)
print(x1 < x2)
print(x1 >= x2)
print(x1 <= x2)
print(x2 * x1)
print(x1 * x2)
