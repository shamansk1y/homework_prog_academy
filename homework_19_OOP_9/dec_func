# 1) Создайте декоратор, который будет подсчитывать, сколько раз была
# вызвана декорируемая функция.

def count(func):
    def count_foo(*args, **kwargs):
        count_foo.count += 1
        return func(*args, **kwargs)
    count_foo.count = 0
    return count_foo

@count
def add(x: int, y: int):
    return x + y

add(1, 1)
add(1, 2)
add(111, 1000)

print(add.count)




# 2) Создайте декоратор, который зарегистрирует декорируемую функцию в
# списке функций, для обработки последовательности.

func_reg = []

def decorator(func):
    func_reg.append(func)
    return func

@decorator
def sub(x: int, y: int):
    return x - y

@decorator
def add(x: int, y: int):
    return x + y

print(func_reg)





# 3) Предположим, в классе определен метод __str__, который возвращает строку на основании класса.
# Создайте такой декоратор для этого метода, чтобы полученная строка сохранялась в текстовый файл, имя которого 
# совпадает с именем класса, метод которого вы декорировали.

def save_str_in_txt(func):
    def inside_func(self):
        res = func(self)
        with open(f'{self.__class__.__name__}.txt', 'a') as f:
            f.write(res + '\n')
        return res
    return inside_func

class Box:
    
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    @save_str_in_txt 
    def __str__(self):
        return f"{self.x}*{self.y}*{self.z}"
    
b_1 = Box(1,2,3)
b_2 = Box(2,2,2)
b_3 = Box(3,2,2)
print(b_1, b_2, b_3, sep="\n")





# 4) Создайте декоратор с параметрами для проведения хронометража работы той или иной функции.
# Параметрами должны выступать то, сколько раз нужно запустить декорируемую функцию и в какой файл сохранить
# результаты хронометража. Цель - провести хронометраж декорируемой функции.

import time

def function_timing(quantity, file_name):
    def dec_func(func):
        def inside_func(*args, **kwargs):
            total_time = 0
            for i in range(quantity):
                start = time.time()
                res = func(*args, **kwargs)
                end = time.time()
                total_time += end - start
            with open(f"{file_name}", 'a') as f:
                f.write(str(total_time)+'\n')
                return res
        return inside_func
    return dec_func

@function_timing(10,"tast_4_time.txt")
def my_func():
    lst = []
    for i in range(1000):
        lst.append(i**3)
    return "lst - complete!"
my_func()
