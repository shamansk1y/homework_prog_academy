# Домашнє завдання:
# 1. Створіть клас, що описує людину (створіть метод, що виводить інформацію про людину).
# 2) На його основі створіть клас Студент (перевизначте метод виведення інформації).
# 3) Створіть клас Група, який містить масив із 10 об'єктів класу Студент.
# Реалізуйте методи додавання, видалення студента та метод пошуку студента за прізвищем.
# Визначте для Групи метод str() для повернення списку студентів у вигляді рядка.

class Human():
    def __init__(self, surname, name, person_id):
        self.surname = surname
        self.name = name
        self.person_id = person_id
    
    def __str__(self):
        return f'{self.surname} {self.name} {self.person_id}'


class Student(Human):
    def __init__(self, surname, name, person_id, programming_language):
        super().__init__(surname, name, person_id)
        self.programming_language = programming_language

    def __str__(self):
        return super().__str__() + f' {self.programming_language}'

    
class Group():
    def __init__(self, title, max_students=10):
        self.title = title
        self.__students = []
        self.max_students = max_students

    # add new student    
    def stud_add(self, student):
        if student not in self.__students and len(self.__students) < self.max_students:
            self.__students.append(student)
            
    # search student     
    def search_stud(self, surname):
        self.res_search = []
        for student in self.__students:
            if student.surname == surname:
                self.res_search.append(student)
        return self.res_search
    
    # del student
    def stud_del(self, surname):
        for student in self.__students:
            if student.surname == surname:
                self.__students.remove(student)
            
        
    def __str__(self):
        return f"Students {self.title} list:\n{'_'*45}\n" + '\n'.join(map(str, self.__students)) +'\n'   
        
        
if __name__ == '__main__':
    group_1 = Group("08-12-2022")
    group_1.stud_add(Student('Doe', 'John', 101, "Python"))
    group_1.stud_add(Student('Smith', 'Jane', 102, "Python"))
    group_1.stud_add(Student('Petrenko', 'Petro', 103, "Python"))
    group_1.stud_add(Student('Ivanov', 'Ivan', 104, "Python"))
    group_1.stud_add(Student('Popova', 'Maria', 105, "Python"))
    group_1.stud_add(Student('Armemovsky', 'Artem', 106, "Python"))
    group_1.stud_add(Student('Karapetyn', 'Ashot', 107, "Python"))
    group_1.stud_add(Student('Nevinoven', 'Rafik', 108, "Python"))
    group_1.stud_add(Student('Makedonskiy', 'Aleksandr', 109, "Python"))
    group_1.stud_add(Student('Nosurname', 'Oleksandr', 110, "Python"))
    
    print(group_1.search_stud('Nosurname'))
    group_1.stud_del('Nosurname')
    group_1.stud_add(Student('Shevchenko', 'Sergiy', 777, "Python"))

    print(group_1)
